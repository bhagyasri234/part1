51.Finding the day of birth
Given an input as date of birth of person, write a program to calculate on which day
(MONDAY,TUESDAY....) he was born store and print the day in Upper Case letters.
Include a class UserMainCode with a static method calculateBornDay which accepts a
string
as input.
The return type of the output is a string which should be the day in which the person was
born.
Create a class Main which would get the input and call the static
method calculateBornDay present in the UserMainCode.
Input and Output Format:
NOTE: date format should be(dd-MM-yyyy)
Input consists a date string.
Output is a string which the day in which the person was born.
Refer sample output for formatting specifications.
Sample Input 1:
29-07-2013
Sample Output 1:
MONDAY
Sample Input 2:
14-12-1992
Sample Output 2:
MONDAY
Main
import java.util.*;
import java.text.*;
public class Main {
public static void main(String[] args) throws ParseException {
Scanner s= new Scanner(System.in);
String input= s.next();
System.out.println(userMainCode.calculateBornDay(input));
}
}
UserMainCode
class userMainCode{
public static String calculateBornDay(String input) throws ParseException{
SimpleDateFormat sdf= new SimpleDateFormat("dd-MM-yyyy");
SimpleDateFormat sdf1= new SimpleDateFormat("EEEEE");
Date d= sdf.parse(input);
String s1= sdf1.format(d);
return s1;
}
}
52.Removing elements from HashMap
Given a HashMap as input, write a program to perform the following operation : If the keys
are divisible by 3 then remove that key and its values and print the number of remaining
keys in the hashmap.
Include a class UserMainCode with a static method afterDelete which accepts a
HashMap
as input.
The return type of the output is an integer which represents the count of remaining
elements in the hashmap.
Create a class Main which would get the input and call the static
method afterDelete present in the UserMainCode.
Input and Output Format:
First input corresponds to the size of hashmap
Input consists a HashMap
Output is an integer which is the count of remaining elements in the hashmap.
Refer sample output for formatting specifications.
Sample Input 1:
4
339
RON
1010
JONS
3366
SMITH
2020
TIM
Sample Output 1:
2
Sample Input 2:
5
1010
C2WE
6252
XY4E
1212
M2ED
7070
S2M41ITH
8585
J410N
Sample Output 2:
3
Main
import java.util.*;
import java.text.*;
public class Main {
public static void main(String[] args) {
Scanner s= new Scanner(System.in);
HashMap<Integer, String>hm=new HashMap<Integer, String>();
int n= s.nextInt();
for(int i=0;i<n;i++){
hm.put(s.nextInt(),s.next());
}
 System.out.println(UserMainCode.afterDelete(hm));
 s.close();
}
}
UserMainCode
class UserMainCode{
public static int afterDelete(HashMap<Integer, String> hm){
int count=0;
Iterator<Integer>itr=hm.keySet().iterator();
while(itr.hasNext())
{
int n=itr.next();
if(n%3!=0)
{
count++;
}
}
return count;
}
}

53.Experience Calculator
Write a program to read Date of Joining and current date as Strings and Experience
as integer and validate whether the given experience and calculated experience are the
same. Print “true” if same, else “false”.
Include a class UserMainCode with a static method calculateExperience which accepts
2
strings and an integer. The return type is boolean.
Create a Class Main which would be used to accept 2 string (dates) and an integer and call
the static method present in UserMainCode.
Input and Output Format:
Input consists of 2 strings and an integer, where the 2 strings corresponds to the date of
joining and current date, and the integer is the experience.
Output is either “true” or “false”.
Refer sample output for formatting specifications.
Sample Input 1:
11/01/2010
01/09/2014
4
Sample Output 1:
true
Sample Input 2:
11/06/2009
01/09/2014
4
Sample Output 2:
False
Main
import java.util.*;
import java.text.*;
public class Main {
public static void main(String[] args)throws ParseException {
Scanner sc=new Scanner(System.in);
String a=sc.next();
String b=sc.next();
int c=sc.nextInt();
long res=(userMainCode.calculateExperience(a,b,c));
if(res==c)
{
System.out.println("true");
}
else
System.out.println("false");
}
}
UserMainCode
class userMainCode{
public static long calculateExperience(String a, String b, int c)throws
ParseException{
SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
Date d=new Date();
Date d1=new Date();
d=sdf.parse(a);
d1=sdf.parse(b);
long t=d.getTime();
long t1=d1.getTime();
long t3=t1-t;
long l1=(24 * 60 * 60 * 1000);
long l=l1*365;
long res=t3/l;
return res;
}
}
54.Flush Characters
Write a program to read a string from the user and remove all the alphabets and
spaces from the String, and only store special characters and digit in the output
String. Print
the output string.
Include a class UserMainCode with a static method getSpecialChar which accepts a
string.
The return type (String) should return the character removed string.
Create a Class Main which would be used to accept a string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a strings.
Output consists of an String (character removed string).
Refer sample output for formatting specifications.
Sample Input :
cogniz$#45Ant
Sample Output :
$#45
Main:
import java.util.*;
import java.text.*;
public class Main {
public static void main(String[] args) {
Scanner s= new Scanner(System.in);
String input=s.next();
System.out.println(UserMainCode.getSpecialChar(input));
}
}
UserMainCode:
class UserMainCode{
public static String getSpecialChar(String input){
int i;
StringBuffer sb= new StringBuffer();
for(i=0;i<input.length();i++)
{
char a=input.charAt(i);
if (!Character.isAlphabetic(a))
sb.append(a);
}
return sb.toString();
}
}
55.String Repetition
Write a program to read a string and an integer and return a string based on the below
rules.
If input2 is equal or greater than 3 then repeat the first three character of the String by
given input2 times, separated by a space.
If input2 is 2 then repeat the first two character of String two times separated by a space,
If input2 is 1 then return the first character of the String.
Include a class UserMainCode with a static method repeatString which takes a string &
integer and returns a string based on the above rules.
Create a Class Main which would be used to accept Input string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string and integer.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1:
COGNIZANT
4
Sample Output 1:
COG COG COG COG
Sample Input 2:
COGNIZANT
2
Sample Output 2:
CO CO
class Main{
public static void main(String[] args) {
Scanner s= new Scanner(System.in);
 System.out.println(“enter a string”);
String input= s.next();
int n= s.nextInt();
System.out.println(UserMainCode.repeatString(input, n));
}
}
class UserMainCode{
public static String repeatString(String input, int n){
StringBuffer sb= new StringBuffer();
String s1= new String();
if (n==1){
s1=input.substring(0,1);
sb.append(s1).append(" ");
}
if(n==2){
s1=input.substring(0,2);
for(int i=0;i<n;i++)
sb.append(s1).append(" ");
}
if(n>=3){
s1=input.substring(0,3);
for(int i=0;i<n;i++)
sb.append(s1).append(" ");
}
return sb.toString();
}
}
56.Average of Prime Locations
Write a program to read an integer array and find the average of the numbers located on
the Prime location(indexes).
Round the avarage to two decimal places.
Assume that the array starts with index 0.
Include a class UserMainCode with a static method averageElements which accepts a
single
integer array. The return type (double) should be the average.
Create a Class Main which would be used to accept Input array and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of n+1 integers. The first integer corresponds to n, the number of elements in
the array. The next 'n' integers correspond to the elements in the array.
Output consists of a single Double value.
Refer sample output for formatting specifications.
Assume that the maximum number of elements in the array is 20.
Sample Input 1:
8
4
1
7
6
5
8
6
9
Sample Output 1:
7.5
Main:
import java.util.*;
import java.text.*;
public class Main {
public static void main(String[] args) {
Scanner s= new Scanner(System.in);
int n,i;
System.out.println("enter the array size");
n=s.nextInt();
int array[]=new int[n];
for(i=0;i<n;i++){
array[i]=s.nextInt();
}
 System.out.println(UserMainCode.AverageElements(array));
 s.close();
}
}
UserMainCode:
class UserMainCode{
public static double AverageElements(int array[]){
int n, sum=0,count=0,count1=0;
double average;
n=array.length;
for(int i=0;i<=n;i++){
for(int j=1;j<n;j++){
if(i%j==0)
count++;
if(count==2){
sum= sum+array[i];
count1++;
}
}
}
average= sum/count1;
DecimalFormat df=new DecimalFormat("#.00");
double ddd=Double.parseDouble(df.format(average));
return ddd;
}
}
57.Common Elements
 Write a program to read two integer arrays and find the sum of common elements in both
the arrays. If there are no common elements return -1 as output Include a class
UserMainCode with a static method sumCommonElements which accepts two single integer
array. The return type (integer) should be the sum of common elements.
Create a Class Main which would be used to accept Input array and call the static method
present in UserMainCode. Assume that all the elements will be distinct. Input and Output
Format: Input consists of 2n+1 integers. The first integer corresponds to n, the number of
elements in the array. The next 'n' integers correspond to the elements in the array, The last n
elements correspond to the elements of the second array. Output consists of a single Integer
value. Refer sample output for formatting specifications.
 Assume that the maximum number of elements in the array is 20.
 Sample Input 1:
4
1
2
3
4
2
3
6
7
Sample Output 1:
5
Main:
import java.util.*;
public class Main {
private static Scanner s ;
;
public static void main(String[] args) {
s = new Scanner (System.in);
int n = s.nextInt();
int a[] = new int[n];
int b[] = new int[n];
for(int i=0;i<n;i++)
{
a[i] = s.nextInt();
}
for(int i=0;i<n;i++)
{
b[i] = s.nextInt();
}
System.out.println(UserMainCode.sumCommonElements(a, b));
}
}
UserMainCode:
public class UserMainCode {
public static int sumCommonElements(int a[],int b[]){
int sum = 0 ;
for(int i=0;i<a.length;i++)
{
for(int j=0;j<b.length;j++){
if(a[i]==b[j])
sum = sum + a[i];}
}
if(sum==0)
return -1;
else return sum;
}
}
58. Middle of Array
 Write a program to read an integer array and return the middle element in the array. The size
of the array would always be odd. Include a class UserMainCode with a static method
getMiddleElement which accepts a single integer array. The return type (integer) should be
the middle element in the array. Create a Class Main which would be used to accept Input 
array and call the static method present in UserMainCode. Input and Output Format: Input
consists of n+1 integers. The first integer corresponds to n, the number of elements in the
array. The next 'n' integers correspond to the elements in the array. Output consists of a single
Integer value. Refer sample output for formatting specifications.
 Assume that the maximum number of elements in the array is 19.
 Sample Input 1:
5
1
5
23
64
9
Sample Output 1:
23
Main:
import java.util.*;
public class Main {
private static Scanner s;
 public static void main(String[] args) {
 s = new Scanner(System.in);
 int n = s.nextInt();
 int[] a = new int[n];
 for(int i=0;i<n;i++){
 a[i] = s.nextInt();
 }
 System.out.println(UserMainCode.getMiddleElement(a));
 }
}
UserMainCode:
public class UserMainCode {
 public static int getMiddleElement(int a[]){
 int n = a.length;
 return a[n/2];
 }
}
59. Simple String Manipulation
 Write a program to read a string and return a modified string based on the following rules.
Return the String without the first 2 chars except when
1. keep the first char if it is 'j' 2. keep the second char if it is 'b'.
Include a class UserMainCode with a static method getString which accepts a string. The
return type (string) should be the modified string based on the above rules. Consider all
letters in the input to be small case. Create a Class Main which would be used to accept Input
string and call the static method present in UserMainCode. Input and Output Format: Input
consists of a string with maximum size of 100 characters. Output consists of a string. Refer
sample output for formatting specifications.
Sample Input 1:
hello
Sample Output 1:
llo
Sample Input 2:
java
Sample Output 2:
Jva
Main:
import java.util.*;
public class Main {
 private static Scanner s;
 public static void main(String[] args) {
 s = new Scanner(System.in);
 String s1 = s.next();
 System.out.println(UserMainCode.getString(s1));
 }
}
UserMainCode:
public class UserMainCode {
 public static String getString(String s1){
 StringBuffer sb=new StringBuffer();
 char a=s1.charAt(0);
 char b=s1.charAt(1);
 if(a!='j'&& b!='b')
 sb.append(s1.substring(2));
 else if(a=='j' && b!='b')
 sb.append("j").append(s1.substring(2));
 else if(a!='j' && b=='b')
 sb.append(s1.substring(1));
 else
 sb.append(s1.substring(0));
 return sb.toString();
 }
}
60. Date Validation
 Write a program to read a string representing a date. The date can be in any of the three
formats 1:dd-MM-yyyy 2: dd/MM/yyyy 3: dd.MM.yyyy If the date is valid, print valid else
print invalid. Include a class UserMainCode with a static method getValidDate which accepts
a string. The return type (integer) should be based on the validity of the date. Create a Class
Main which would be used to accept Input string and call the static method present in
UserMainCode. Input and Output Format: Input consists of a string. Output consists of a
string. Refer sample output for formatting specifications.
Sample Input 1:
03.12.2013
Sample Output 1:
valid
Sample Input 2:
03$12$2013
Sample Output 3:
Invalid
Main:
import java.util.*;
public class Main {
public static void main(String[] args) {
 Scanner sc = new Scanner(System.in);
String s= sc.next();
 int b = UserMainCode.getvalues(s);
 if(b==1)
 System.out.println("Valid");
 else
 System.out.println("Invalid");
}
}
UserMainCode:
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class UserMainCode {
 public static int getvalues(String s) {
 if(s.matches("[0-9]{2}[.]{1}[0-9]{2}[.]{1}[0-9]{4}"))
 {
 SimpleDateFormat sdf=new SimpleDateFormat("dd.MM.yyyy");
 sdf.setLenient(false);
 try
 {
 Date d1=sdf.parse(s);
 return 1;
 } catch (ParseException e) {
 return -1;
 }
 }
 else if(s.matches("[0-9]{2}[/]{1}[0-9]{2}[/][0-9]{4}"))
 {
 SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");
 sdf.setLenient(false);
 try
 {
 Date d1=sdf.parse(s);
 return 1;
 } catch (ParseException e) {
 return -1;
 }
 }
 else if(s.matches("[0-9]{2}[-]{1}[0-9]{2}[-][0-9]{4}"))
 {
 SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
 sdf.setLenient(false);
 try
 {
 Date d1=sdf.parse(s);
 return 1;
 } catch (ParseException e) {
 return -1;
 }
 }
 else
 return -1;
 }
}
61. Boundary Average
 Given an int array as input, write a program to compute the average of the maximum and
minimum element in the array. Include a class UserMainCode with a static method
“getBoundaryAverage” that accepts an integer array as argument and returns a float that
corresponds to the average of the maximum and minimum element in the array. Create a
class Main which would get the input array and call the static method getBoundaryAverage
present in the UserMainCode. Input and Output Format: The first line of the input consists
of an integer n, that corresponds to the size of the array. The next n lines consist of integers
that correspond to the elements in the array. Assume that the maximum number of elements
in the array is 10. Output consists of a single float value that corresponds to the average of
the max and min element in the array.
Sample Input :
6
3
6
9
4
2
5
Sample Output:
5.5
Main:
import java.util.*;
import java.util.Arrays;
public class Main {
public static void main(String[] args) {
Scanner sc = new Scanner(System.in);
int s = sc.nextInt();
int a[] = new int[s];
for (int i = 0; i < s; i++)
a[i] = sc.nextInt();
System.out.println(UserMainCode.getBoundaryAverage(a));
}
}
UserMainCode
import java.util.Arrays;
public class UserMainCode {
 public static float getBoundaryAverage(int a[] ){
 Arrays.sort(a);
 int sum = a[0] + a[a.length - 1];
 float avg = (float) sum / 2;
 return avg;
 }
}
62. Count Vowels
Given a string input, write a program to find the total number of vowels in the given string.
Include a class UserMainCode with a static method “countVowels” that accepts a String
argument and returns an int that corresponds to the total number of vowels in the given string.
Create a class Main which would get the String as input and call the static method
countVowels present in the UserMainCode. Input and Output Format: Input consists of a
string. Output consists of an integer..
Sample Input:
avinash
Sample Output:
3
Main:
import java.util.*;
public class Main {
private static Scanner s;
public static void main(String[] args) {
s = new Scanner(System.in);
String s1= s.next();
System.out.println(countVowels(s1));
}
UserMainCode
public class UserMainCode{
public static int countVowels(String s1)
{
String s2=s1.toLowerCase();
String s3="aeiou";
int count=0;
for(int i=0;i<s2.length();i++)
{
for(int j=0;j<s3.length();j++)
{
if(s2.charAt(i)==s3.charAt(j))
{
count++;
}
}
}
return count;
}
}
63. Month Name
 Given a date as a string input in the format dd-mm-yy, write a program to extract the month
and to print the month name in upper case. Include a class UserMainCode with a static
method “getMonthName” that accepts a String argument and returns a String that
corresponds to the month name. Create a class Main which would get the String as input and 
call the static method getMonthName present in the UserMainCode. The month names are
{JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST,
SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER} Input and Output Format: Input
consists of a String. Output consists of a String.
Sample Input:
01-06-82
Sample Output:
JUNE
Main:
import java.text.ParseException;
import java.util.Scanner;
public class Main {
public static void main(String[] args) throws ParseException {
Scanner sc=new Scanner(System.in);
String s1=sc.nextLine();
System.out.println(UserMainCode.calculateBornDay(s1));
sc.close();
}
}
UserMainCode:
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
public class UserMainCode {
public static String calculateBornDay(String s1) throws ParseException
{
SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yy");
SimpleDateFormat sdf1=new SimpleDateFormat("MMMM");
Date d=sdf.parse(s1);
String s=sdf1.format(d);
return s.toUpperCase();
}
}
64. Reverse SubString
 Given a string, startIndex and length, write a program to extract the substring from right to
left. Assume the last character has index 0. Include a class UserMainCode with a static
method “reverseSubstring” that accepts 3 arguments and returns a string. The 1st argument
corresponds to the string, the second argument corresponds to the startIndex and the third
argument corresponds to the length. Create a class Main which would get a String and 2
integers as input and call the static method reverseSubstring present in the UserMainCode.
Input and Output Format: The first line of the input consists of a string. The second line of
the input consists of an integer that corresponds to the startIndex. The third line of the input
consists of an integer that corresponds to the length of the substring.
Sample Input:
rajasthan 
2
3
Sample Output:
hts
Main:
import java.util.*;
public class Main {
private static Scanner s;
public static void main(String[] args) {
s =new Scanner(System.in);
String input1= s.next();
int input2=s.nextInt();int input3=s.nextInt();
System.out.println(UserMainCode.retrieveString(input1,input2,input3));
}
}
UserMainCode
class UserMainCode {
public static String retrieveString(String input1, int input2, int input3) {
StringBuffer sb=new StringBuffer(input1);
sb.reverse();
String output=sb.substring(input2, input2+input3);
return output;
}
}
65. String Finder
Given three strings say Searchstring, Str1 and Str2 as input, write a program to find out if Str2
comes after Str1 in the Searchstring.
Include a class UserMainCode with a static method “stringFinder” that accepts 3 String
arguments and returns an integer. The 3 arguments correspond to SearchString, Str1 and Str2.
The function returns 1 if Str2 appears after Str1 in the Searchtring. Else it returns 2.
Create a class Main which would get 3 Strings as input and call the static
method stringFinder present in the UserMainCode.
Input and Output Format:
Input consists of 3 strings.
The first input corresponds to the SearchString.
The second input corresponds to Str1.
The third input corresponds to Str2.
Output consists of a string that is either “yes” or “no”
Sample Input 1: Sample Output 1:
geniousRajKumarDev Yes
Raj
Dev
Sample Input 2: Sample Output 2:
geniousRajKumarDev No
Dev
Raj
USERMAINCODE:
public class UserMainCode {
public static int stringFinder(String s1,String s2,String s3)
{
 String a1=s1.toLowerCase();
 String a2=s2.toLowerCase();
 String a3=s3.toLowerCase();
 if(a1.contains(a2)&&a1.contains(a3))
 {
 if(a1.indexOf(a2)<a1.indexOf(a3))
 {
 return 1;
 }
 else
 return 2;
 }
 return 0;
}}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 String s2=s.next();
 String s3=s.next();
 int b=UserMainCode.stringFinder(s1, s2, s3);
if(b==1)
{
 System.out.println("yes");
}
else
 System.out.println("No");
s.close();
 }
}
66. Phone Number Validator
Given a phone number as a string input, write a program to verify whether the phone number
is valid using the following business rules:
-It should contain only numbers or dashes (-)
-Dashes may appear at any position
-Should have exactly 10 digits
Include a class UserMainCode with a static method “validatePhoneNumber” that accepts a
String input and returns an integer. The method returns 1 if the phone number is valid. Else
it returns 2.
Create a class Main which would get a String as input and call the static method
validatePhoneNumber present in the UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of a string that is either 'Valid' or 'Invalid'
Sample Input 1: Sample Output 1:
265-265-7777 Valid
Sample Input 2: Sample Output 2:
265-65-7777 Invalid
USERMAINCODE:
public class UserMainCode {
public static int validatePhoneNumber(String s1)
{
String s2 = s1.replaceAll("-", "");
if (s2.matches("[0-9]{10}"))
 {
 return 1;
 }
 else
 return 2;
}
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.nextLine();
 int b=UserMainCode.validatePhoneNumber(s1);
if(b==1)
{
 System.out.println("Valid");
}
else
 System.out.println("Invalid");
s.close();
 }
}
67. Month : Number of Days
Given two inputs year and month (Month is coded as: Jan=0, Feb=1 ,Mar=2 ...), write a
program to find out total number of days in the given month for the given year. Include a
class UserMainCode with a static method “getNumberOfDays” that
accepts 2 integers as arguments and returns an integer. The first argument corresponds to
the year and the second argument corresponds to the month code. The method returns an
integer corresponding to the number of days in the month.
Create a class Main which would get 2 integers as input and call the static method
getNumberOfDays present in the UserMainCode.
Input and Output Format:
Input consists of 2 integers that correspond to the year and month code. Output consists of
an integer that corresponds to the number of days in the month in the given year.
Sample Input: Sample Output:
2000 29
1
USERMAINCODE:
import java.util.Calendar;
public class UserMainCode {
public static int getNumberOfDays(int y,int c)
{
 Calendar cal=Calendar.getInstance();
 cal.set(Calendar.YEAR, y);
 cal.set(Calendar.MONTH, c);
 int day=cal.getActualMaximum(Calendar.DAY_OF_MONTH);
 return day;
}
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
Scanner s=new Scanner(System.in);
int y=s.nextInt();
int c=s.nextInt();
System.out.println(UserMainCode.getNumberOfDays(y, c));
s.close();
}
}
68. Negative String
Given a string input, write a program to replace every appearance of the word "is" by "is
not".
If the word "is" is immediately preceded or followed by a letter no change should be made
to the string .
Include a class UserMainCode with a static method “negativeString” that accepts a String
arguement and returns a String.
Create a class Main which would get a String as input and call the static method
negativeString present in the UserMainCode.
Input and Output Format:
Input consists of a String.
Output consists of a String.
Sample Input 1: Sample Output 1:
This is just a misconception This is not just a misconception
Sample Input 2: Sample Output 2:
Today is misty Today is not misty
USERMAINCODE:
public class UserMainCode {
public static String negativeString(String s1)
{
 String str=s1.replace(" is ", " is not ");
 return str;
}
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.nextLine();
 System.out.println(UserMainCode.negativeString(s1));
 s.close();
 }
}
69. Validate Number
Given a negative number as string input, write a program to validate the number and to print
the corresponding positive number.
Include a class UserMainCode with a static method “validateNumber” that accepts a string
argument and returns a string. If the argument string contains a valid negative number, the
method returns the corresponding positive number as a string. Else the method returns -1.
Create a class Main which would get a String as input and call the static method
validateNumber present in the UserMainCode.
Input and Output Format:
Input consists of a String.
Output consists of a String.
Sample Input 1: Sample Output 1:
-94923 94923
Sample Input 2: Sample Output 2:
-6t -1
USERMAINCODE:
public class UserMainCode {
public static String validateNumber(String s1)
{ String ss="-1";
 if (s1.matches("[-]{1}[0-9]{1,}"))
 {
 String st=s1.replace("-","");
 return st;
 }
 else
 return ss;
 }
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 System.out.println(UserMainCode.validateNumber(s1));
 s.close();
 }
}
70. Digits
Write a program to read a non-negative integer n that returns the count of the occurances of
7 as digit.
Include a class UserMainCode with a static method countSeven which accepts the integer
value. The return type is integer which is the count value.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a integer.
Output consists of integer.
Refer sample output for formatting specifications.
Sample Input 1: Sample Output 1:
717 2
Sample Input 2: Sample Output 2:
4534 0
USERMAINCODE:
public class UserMainCode {
public static int countSeven(int n)
{
 int rem,sum=0;

 while(n>0)
 {
rem=n%10;
if(rem==7)
{
 sum++;
}
n=n/10;
 }
 return sum;
}
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 int n=s.nextInt();
 System.out.println(UserMainCode.countSeven(n));
 s.close();
 }
}
71. String Processing – III
Write a program to read a string where all the lowercase 'x' chars have been moved to the
end of the string.
Include a class UserMainCode with a static method moveX which accepts the string. The
return type is the modified string.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1: Sample Output 1:
xxhixx hixxxx
Sample Input 2: Sample Output 2:
XXxxtest XXtestxx
USERMAINCODE:
public class UserMainCode {
public static String moveX(String s1)
{
 String s2="";
 String s3="";
 for(int i=0;i<s1.length();i++)
 {
 char c=s1.charAt(i);
 if(c=='x')
 {
s2=s2+s1.charAt(i);
}
 else
 {
s3=s3+s1.charAt(i)
 }
 }
 String st=s3.concat(s2);
 return st;
}
}
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 System.out.println(UserMainCode.moveX(s1));
 s.close();
 } }
72. String Processing – IV
Write a program to read a string and also a number N. Form a new string starting with
1stcharacter and with every Nth character of the given string. Ex - if N is 3, use chars 1, 3, 6,...
and so on to form the new String. Assume N>=1.
Include a class UserMainCode with a static method getStringUsingNthCharacter which
accepts the string and the number n. The return type is the string as per the problem
statement.
Create a Class Main which would be used to accept the string and integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of a string and integer.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1: Sample Output 1:
HelloWorld HelWrd
USERMAINCODE:
public class UserMainCode {
public static String getStringUsingNthCharacter(String s1,int n)
{
 StringBuffer sb=new StringBuffer();
 sb.append(s1.charAt(0));
 for(int i=n-1;i<s1.length();i+=n)
 {
 sb.append(s1.charAt(i));

 }
 return sb.toString();
} }
MAIN:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 int n=s.nextInt();
 System.out.println(UserMainCode.getStringUsingNthCharacter(s1, n));
 s.close();
 }
}
73. Digit Comparison
Write a program to read two integers and return true if they have the same last digit.
Include a class UserMainCode with a static method compareLastDigit which accepts two
integers and returns boolean. (true / false)
Create a Class Main which would be used to accept two integers and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of two integer.
Output consists TRUE / FALSE.
Refer sample output for formatting specifications.
Sample Input 1:
59
29
Sample Output 1:
TRUE
UserMainCode
public class UserMainCode {
public static boolean compareLastDigit(int c,int d)
{
 int c1=c%10;
 int d1=d%10;
 boolean b=false;
 if(c1==d1)
 {
 b=true;
 }
 return b;
}
}
Main
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 int c=s.nextInt();
 int d=s.nextInt();
 boolean res=UserMainCode.compareLastDigit(c,d);
 if(res==true)
 {
 System.out.println("TRUE");
 }

else
 {
 System.out.println("FALSE");
 }

s.close();
 }
}
74. Duplicates
GIven three integers (a,b,c) find the sum. However, if one of the values is the same as
another, both the numbers do not count towards the sum and the third number is returned
as the sum.
Include a class UserMainCode with a static method getDistinctSum which accepts three
integers and returns integer.
Create a Class Main which would be used to accept three integers and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of three integers.
Output consists of a integer.
Refer sample output for formatting specifications.
Sample Input 1:
1
2
1
Sample Output 1:
2
Sample Input 2:
1
2
3
Sample Output 2:
6
UserMainCode:
public class UserMainCode {
 public static int getDistinctSum(int a,int b,int c)
 {
 int sum;
 if(a==b)
 {
 sum=c;
 }

else if(b==c)
 {
 sum=a;
 }
 else if(c==a)
 {
 sum=b;
 }
 else
 {
 sum=a+b+c;
 }
 return sum;
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 int a=s.nextInt();
 int b=s.nextInt();
 int c=s.nextInt();
 int sum=UserMainCode.getDistinctSum(a, b, c);
 System.out.println(sum);
 s.close();
 }
}
75. String Processing - MixMania
Write a program to read a string and check if it starts with '_ix' where '_' is any one char(a-z,
A-Z, 0-9).
If specified pattern is found return true else false.
Include a class UserMainCode with a static method checkPattern which accepts the string.
The return type is TRUE / FALSE.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of TRUE / FALSE.
Refer sample output for formatting specifications.
Sample Input 1:
Mix Mania
Sample Output 1:
TRUE
UserMainCode
public class UserMainCode {
 public static boolean checkPattern(String str)
 {
 String str1=str.substring(0,3);
 int a=0,b=0,c=0;
 char c1=str1.charAt(0);
 char c2=str1.charAt(1);
 char c3=str1.charAt(2);
 boolean b1=false;
 if(Character.isDigit(c1)||Character.isLetter(c1))
 {
 a=1;
 }
 if(c2=='i')
 {
 b=1;
 }
 if(c3=='x')
 {
 c=1;
 }

 if(a==1&&b==1&&c==1)
 {
 b1=true;
 }
 return b1;
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String str=s.nextLine();
 boolean b2=UserMainCode.checkPattern(str);
 if(b2==true)
 {
 System.out.println("TRUE");
 }
 else
 {
 System.out.println("FALSE");
 }
s.close();
 }
}
76. String Processing
Write a program to read a string and return a new string where the first and last chars have
been interchanged.
Include a class UserMainCode with a static method exchangeCharacters which accepts
the
string. The return type is the modified string.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of string.
Refer sample output for formatting specifications.
Sample Input 1:
HelloWorld
Sample Output 1:
delloWorlH
UserMainCode
public class UserMainCode {
public static String exchangeCharacters(String s1)
{
 String s2=s1.substring(1,s1.length()-1);
 StringBuffer sb=new StringBuffer();
 char c1=s1.charAt(0);
 char c2=s1.charAt(s1.length()-1);
 sb.append(c2).append(s2).append(c1);
 return sb.toString();
}
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();

 System.out.println(UserMainCode.exchangeCharacters(s1));
 s.close();
 }
}
77. Regular Expression - II
Given a string (s) apply the following rules.
1. String consists of three characters only.
2. The characters should be alphabets only.
If all the conditions are satisifed then print TRUE else print FALSE.
Include a class UserMainCode with a static method validateString which accepts the
string.
The return type is the boolean formed based on rules.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of TRUE or FALSE .
Refer sample output for formatting specifications.
Sample Input 1:
AcB
Sample Output 1:
TRUE
Sample Input 2:
A2B
Sample Output 2:
FALSE
UserMainCode:
public class UserMainCode {
 public static boolean validateString(String s1)
 {
 boolean b=false;
 if(s1.length()==3)
 {
 if(s1.matches("[a-zA-z]{3}"))
 {
 b=true;
 }

 }
 return b;
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 boolean b1=userMainCode.validateString(s1);
 if(b1==true)
 {
 System.out.println("TRUE");
 }
 else
 {
 System.out.println("FALSE");
 }

s.close();
 }
}
78. Strings Processing - Replication
Write a program to read a string and also a number N. Return the replica of original string
for n given time.
Include a class UserMainCode with a static method repeatString which accepts the the
string and the number n. The return type is the string based on the problem statement.
Create a Class Main which would be used to accept the string and integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of a string and integer.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1:
Lily
2
Sample Output 1:
LilyLily
UserMainCode:
public class UserMainCode {
 public static String repeatString(String s1,int n)
 {
 StringBuffer sb=new StringBuffer();
 for(int i=0;i<n;i++)
 {
 sb.append(s1);
 }
 return sb.toString();
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.next();
 int n=s.nextInt();
 System.out.println(UserMainCode.repeatString(s1, n));
s.close();
 }
}
79. SumOdd
Write a program to read an integer and find the sum of all odd numbers from 1 to the given
number. [inclusive of the given number]
if N = 9 [ 1,3,5,7,9]. Sum = 25
Include a class UserMainCode with a static method addOddNumbers which accepts the
number n. The return type is the integer based on the problem statement.
Create a Class Main which would be used to accept the integer and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a integer.
Output consists of a integer.
Refer sample output for formatting specifications.
Sample Input 1:
6
Sample Output 1:
9
UserMainCode:
public class UserMainCode {
 public static int addOddNumbers(int n)
 {
 int sum=0;
 for(int i=1;i<=n;i+=2)
 {
 sum=sum+i;
 }
 return sum;
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 int n=s.nextInt();
 System.out.println(UserMainCode.addOddNumbers(n));
 s.close();
 }
}
80. String Processing - V
Write a program to read a string array, concatenate the array elements one by one
separated by comma and return the final string as output.
Include a class UserMainCode with a static method concatString which accepts the string
array. The return type is the string.
Create a Class Main which would be used to accept the string array and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of an integer n which is the number of elements followed by n string values.
Output consists of the string.
Refer sample output for formatting specifications.
Sample Input 1:
3
AAA
BBB
CCC
Sample Output 1:
AAA,BBB,CCC
UserMainCode:
public class UserMainCode {
 public static String concatString(int n,String[] s1)
 {
 StringBuffer sb=new StringBuffer();
 for(int i=0;i<s1.length;i++)
 {
 sb.append(s1[i]).append(",");
 }
 String s2=sb.toString();
 String s3=s2.substring(0,s2.length()-1);

 return s3;
 }
}
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
Scanner s=new Scanner(System.in);
int n=s.nextInt();
String s1[]=new String[n];
for(int i=0;i<n;i++)
{
 s1[i]=s.next();
}
System.out.println(UserMainCode.concatString(n, s1));
s.close();
 }
}
81.Unique Number
GIven three integers (a,b,c) , Write a program that returns the number of unique integers
among the three.
Include a class UserMainCode with a static method calculateUnique which accepts three
integers and returns the count as integer.
Create a Class Main which would be used to accept three integers and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of three integers.
Output consists of a integer.
Refer sample output for formatting specifications.
Sample Input 1:
12
4
3
Sample Output 1:
3
Sample Input 2:
4
-4
4
Sample Output 2:
2
Main:
import java.util.*;
public class Main {
public static void main(String[]args){
 Scanner s=new Scanner(System.in);
 int a=s.nextInt();
 int b=s.nextInt();
 int c=s.nextInt();
 System.out.println(UserMainCode.calculateUnique(a, b, c));
 s.close();
}
}
UserMainCode:
public class UserMainCode {
 public static int calculateUnique(int a,int b,int c)
 {
 int d=0;
 if(a!=b&&a!=c&&b!=c)
 {
 d=3;
 }
 else if(a==b&&a==c&&b==c)
 {
 d=1;
 }
 else if((a!=b&&a==c&&b==c) || (a!=b&&a!=c&&b==c))
 {
 d=2;
 }
 else if((a==b&&a!=c&&b==c) || (a==b&&a!=c&&b!=c))
 {
 d=2;
 }
 else if((a==b&&a==c&&b!=c) || (a!=b&&a==c&&b!=c))
 {
 d=2;
 }

 return d;
 }}
82. Math Calculator
Write a program that accepts three inputs, first two inputs are operands in int form and
third one being one of the following five operators: +, -, *, /, %. Implement calculator logic
and return the result of the given inputs as per the operator provided. In case of division,
Assume the result would be integer.
Include a class UserMainCode with a static method calculator which accepts two integers,
one operand and returns the integer.
Create a Class Main which would be used to accept three integers and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of two integers and a character.
Output consists of a integer.
Refer sample output for formatting specifications.
Sample Input 1:
23
2
*
Sample Output 1:
46
Main:
import java.util.*;
public class Main {
 public static void main(String[]args){
 Scanner s=new Scanner(System.in);
 int a=s.nextInt();
 int b=s.nextInt();
 char c = s.next().trim().charAt(0);
 System.out.println(UserMainCode.calculator(a, b, c));
 s.close();
 }}
UserMainCode:
public class UserMainCode {
 public static int calculator(int a,int b,char c)
 {
 int a1=0;
 if(c=='*')
 {
 a1=a*b;
 }
 else if(c=='+')
 {
 a1=a+b;
 }
 else if(c=='-')
 {
 a1=a-b;
 }
 else if(c=='/')
 {
 a1=a/b;
 }
 else if(c=='%')
 {
 a1=a%b;
 }
 return a1;
 }}
83. Scores
Write a program to read a integer array of scores, if 100 appears at two consecutive
locations return true else return false.
Include a class UserMainCode with a static method checkScores which accepts the
integer
array. The return type is boolean.
Create a Class Main which would be used to accept the integer array and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of an integer n which is the number of elements followed by n integer values.
Output consists of a string that is either 'TRUE' or 'FALSE'.
Refer sample output for formatting specifications.
Sample Input 1:
3
1
100
100
Sample Output 1:
TRUE
Sample Input 2:
3
100
1
100
Sample Output 2:
FALSE
Main:
import java.util.*;
public class Main {
 public static void main (String[] args)
 {
 Scanner sc = new Scanner(System.in);
 int n = sc.nextInt();
 int[] arr = new int[n];
 for(int i=0;i<n;i++){
 arr[i] = sc.nextInt();
 }
 System.out.println(UserMainCode.checkScores(arr, n));
 sc.close();
 }
}
UserMainCode:
public class UserMainCode {
 public static boolean checkScores(int arr[], int n){
 boolean b = false;
 for(int i=0;i<n-1;i++){
 if(arr[i] == 100){
 if(arr[i+1] == 100){
 b = true;
 break;
 }
 }
 }
 return b;
 }
}
84. ArrayFront
Write a program to read a integer array and return true if one of the first 4 elements in the
array is 9 else return false.
Note: The array length may be less than 4.
Include a class UserMainCode with a static method scanArray which accepts the integer
array. The return type is true / false.
Create a Class Main which would be used to accept the integer array and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of an integer n which is the number of elements followed by n integer values.
Output consists of TRUE / FALSE.
Refer sample output for formatting specifications.
Sample Input 1:
6
1
2
3
4
5
6
Sample Output 1:
FALSE
Sample Input 2:
3
1
2
9
Sample Output 2:
TRUE
Main:
import java.util.*;
public class Main {
 public static void main(String []args){
 Scanner sc=new Scanner(System.in);
 int s=sc.nextInt();
 int []a=new int[s];
 for(int i=0;i<s;i++)
 {
 a[i]=sc.nextInt();
 }
if(UserMainCode.scanArray(a)==true)
System.out.println("TRUE");
 else
System.out.println("FALSE");
 sc.close();
 }
}
UserMainCode:
public class UserMainCode {
 public static boolean scanArray(int[] a)
 {
 int u=0,l=0;
 boolean b=false;
 if(a.length>=4)
 l=4;
 else
 l=a.length;
 for(int i=0;i<l;i++)
 if(a[i]==9)
 u=10;
 if(u==10)
 b=true;
 return b;
 }
 }
85. Word Count
Given a string array (s) and non negative integer (n) and return the number of elements in
the array which have same number of characters as the givent int N.
Include a class UserMainCode with a static method countWord which accepts the string
array and integer. The return type is the string formed based on rules.
Create a Class Main which would be used to accept the string and integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of a an integer indicating the number of elements in the string array followed
the elements and ended by the non-negative integer (N).
Output consists of a integer .
Refer sample output for formatting specifications.
Sample Input 1:
4
a
bb
b
ccc
1
Sample Output 1:
2
Sample Input 2:
5
dog
cat
monkey
bear
fox
3
Sample Output 2:
3
Main:
import java.util.*;
public class Main {
 public static void main(String []args){
 Scanner sc=new Scanner(System.in);
 int n=sc.nextInt();
 String[] str=new String[n];
 for(int i=0;i<n;i++)
 {
 str[i]=sc.next();
 }
 int c=sc.nextInt();
 System.out.println(UserMainCode.countWord(n,str,c));
 sc.close();
}}
UserMainCode:
public class UserMainCode {
 public static int countWord(int n,String str[],int c)
 {
 int count=0;
 for(int i=0;i<str.length;i++)
 {
 if(str[i].length()==c)
 {
 count++;
 }
 }
 return count;
 }
}
86. Find Distance
Write a Program that accepts four int inputs(x1,y1,x2,y2) as the coordinates of two points.
Calculate the distance between the two points using the below formula.
Formula : square root of((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))
Then, Round the result to return an int
Include a class UserMainCode with a static method findDistance which accepts four
integers. The return type is integer representing the formula.
Create a Class Main which would be used to accept the input integers and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of four integers.
Output consists of a single integer.
Refer sample output for formatting specifications.
Sample Input 1:
3
4
5
2
Sample Output 1:
3
Sample Input 2:
3
1
5
2
Sample Output 2:
2
Main:
import java.util.*;
public class Main {
 public static void main (String[] args)
 {
 Scanner s=new Scanner(System.in);
 int a=s.nextInt();
 int b=s.nextInt();
 int c=s.nextInt();
 int d=s.nextInt();
System.out.println(UserMainCode.findDistance(a,b,c,d));
s.close();
}
}
UserMainCode:
public class UserMainCode {
 public static int findDistance(int a,int b,int c,int d) {
 long q=(int)Math.round(Math.sqrt(((a-c)*(a-c))+((b-d)*(b-d))));
 return (int) q;
 }
 }
87. Word Count - II
Write a program to read a string and count the number of words present in it.
Include a class UserMainCode with a static method countWord which accepts the string.
The return type is the integer giving out the count of words.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of integer.
Refer sample output for formatting specifications.
Sample Input 1:
Today is Sunday
Sample Output 1:
3
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 String s1=s.nextLine();
 UserMainCode.countWord(s1);
 s.close();
 }
 }
UserMainCode:
import java.util.StringTokenizer;
public class UserMainCode {
public static void countWord(String s1){
 StringTokenizer st=new StringTokenizer(s1," ");
 int n=st.countTokens();
 System.out.println(n);
}
}
88. Sum of Max & Min
Write a Program that accepts three integers, and returns the sum of maximum and
minimum numbers.
Include a class UserMainCode with a static method getSumMaxMin which accepts three
integers. The return type is integer representing the formula.
Create a Class Main which would be used to accept the input integers and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of three integers.
Output consists of a single integer.
Refer sample output for formatting specifications.
Sample Input 1:
12
17
19
Sample Output 1:
31
Main:
import java.util.*;
public class Main {
 public static void main(String[] args) {
 Scanner s=new Scanner(System.in);
 int a=s.nextInt();
 int b=s.nextInt();
 int c=s.nextInt();
 System.out.println(UserMainCode.getSumMaxMin(a,b,c));
 s.close();
}}
UserMainCode:
public class UserMainCode {
 public static int getSumMaxMin(int a,int b,int c)
 {
 int d=0;
 if(a<b&&b<c)
 {
 d=a+c;
 }
 else if(a<b&&b>c)
 {
 d=b+c;
 }
 else if(a>b&&b<c)
 {
 d=a+b;
 }
 return d;
 }}
89. Decimal to Binary Conversion
Write a Program that accepts a decimal number n, and converts the number to binary.
Include a class UserMainCode with a static method convertDecimalToBinary which
accepts
an integer. The return type is long representing the binary number.
Create a Class Main which would be used to accept the input integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of single integer.
Output consists of a single long.
Refer sample output for formatting specifications.
Sample Input 1:
5
Sample Output 1:
101
MAIN
import java.util.Scanner;
public class Main {
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
int n=s.nextInt();
System.out.println(UserMainCode.convertDecimalToBinary(n));
s.close();
}
}
UserMainCode
public class UserMainCode {
 public static long convertDecimalToBinary(int n){
 String s1=Integer.toBinaryString(n);
 long y=Long.parseLong(s1);
return y;
}
}
90.String Processing - V
Write a program to read a string and also a number N. Form a new string made up of n
repetitions of the last n characters of the String. You may assume that n is between 1 and
the length of the string.
Include a class UserMainCode with a static method returnLastRepeatedCharacters
which
accepts the string and the number n. The return type is the string as per the problem
statement.
Create a Class Main which would be used to accept the string and integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of a string and integer.
Output consists of a string.
Refer sample output for formatting specifications.
Sample Input 1:
Hello
2
Sample Output 1:
lolo
Sample Input 2:
Hello
3
Sample Output 2:
Llollollo
MAIN
import java.util.Scanner;
public class Main
{

public static void main(String[] args)
{
 Scanner s=new Scanner(System.in);
String s1=s.nextLine();
int n1=s.nextInt();
System.out.println(UserMainCode.returnLastRepeatedCharacters(s1,n1));
s.close();
}
}
USERMAINCODE
public class UserMainCode{
 public static String returnLastRepeatedCharacters(String s1, int n1)
{
StringBuffer sb = new StringBuffer();
for(int i = 0 ; i < n1 ; i++)
sb.append(s1.substring(s1.length()-n1, s1.length()));
return sb.toString();
}
}

91.Regular Expression - III
Given a string (s) apply the following rules.
1. String should not begin with a number.
If the condition is satisifed then print TRUE else print FALSE.
Include a class UserMainCode with a static method validateString which accepts the
string.
The return type is the boolean formed based on rules.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of TRUE or FALSE .
Refer sample output for formatting specifications.
Sample Input 1:
ab2
Sample Output 1:
TRUE
Sample Input 2:
72CAB
Sample Output 2:
FALSE
MAIN
import java.util.Scanner;
public class Main {
 public static void main(String[] args)
 {
 Scanner s=new Scanner(System.in);
 String s1=s.nextLine();
 if(UserMainCode.validateString(s1)==true)
System.out.println("TRUE");
 else System.out.println("FALSE");
 s.close();
 }
}
USERMAINCODE
public class UserMainCode {
 public static boolean validateString(String s)
 {
 boolean b=false;
 if(s.charAt(0)=='0'||s.charAt(0)=='1'||s.charAt(0)=='2'||s.charAt(0)=='3'||
s.charAt(0)=='4'||s.charAt(0)=='5'||s.charAt(0)=='6'||s.charAt(0)=='7'||s.charAt(0
)=='8'||s.charAt(0)=='9'){

 b=false;
 }
 else
 b=true;
 return b;
 }
}
92.String Processing - TrimCat
Write a program to read a string and return a new string which is made of every alternate
characters starting with the first character. For example NewYork will generate Nwok, and
Samurai will generate Smri.
Include a class UserMainCode with a static method getAlternateChars which accepts the
string. The return type is the modified string.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of string.
Refer sample output for formatting specifications.
Sample Input 1:
Hello
Sample Output 1:
Hlo
MAIN
import java.util.Scanner;
public class Main
{
public static void main(String[] args)
{
 Scanner s=new Scanner(System.in);
String s1=s.nextLine();
System.out.println(UserMainCode.getAlternateChars(s1));
s.close();
}
}
USERMAINCODE
public class UserMainCode{
public static String getAlternateChars(String s)
{
//String s1=s.replaceAll(“ “, “”);
StringBuffer sbf = new StringBuffer();
for(int i = 0; i < s.length() ; i=i+2)
{
sbf.append(s.charAt(i));
}
String str = sbf.toString();
return str;
}
}
93. String Processing - Username
Write a program to read a valid email id and extract the username.
Note - user name is the string appearing before @ symbol.
Include a class UserMainCode with a static method fetchUserName which accepts the
string. The return type is the modified string.
Create a Class Main which would be used to accept the string and call the static method
present in UserMainCode.
Input and Output Format:
Input consists of a string.
Output consists of string.
Refer sample output for formatting specifications.
Sample Input 1:
admin@xyz.com
Sample Output 1:
admin
MAIN CLASS
import java.util.Scanner;
public class Main {
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
String s1=s.nextLine();
System.out.println(UserMainCode.fetchUserName(s1));;
s.close();
}
}
USERMAINCODE
import java.util.StringTokenizer;
public class UserMainCode {
 public static String fetchUserName(String s1) {
 StringTokenizer st=new StringTokenizer(s1,"@");
 String s2=st.nextToken();
 return(s2);
 }}
94. String Processing - VII
Write a program to read a two strings and one int value(N). check if Nth character of first
String from start and Nth character of second String from end are same or not. If both are
same return true else return false.
Check need not be Case sensitive
Include a class UserMainCode with a static method isEqual which accepts the two strings
and a integer n. The return type is the TRUE / FALSE.
Create a Class Main which would be used to read the strings and integer and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of two strings and an integer.
Output consists of TRUE / FALSE .
Refer sample output for formatting specifications.
Sample Input 1:
AAAA
abab
2
Sample Output 1:
TRUE
Sample Input 2:
MNOP
QRST
3
Sample Output 2:
FALSE
 MAIN
import java.util.Scanner;
public class Main {
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
String s1=s.nextLine();
String s2=s.nextLine();
int n=s.nextInt();
boolean output=UserMainCode.isEqual(s1,s2,n);
System.out.println(output);
s.close();
}
}
USERMAINCODE
public class UserMainCode {
public static boolean isEqual(String s1,String s2,int n){
boolean a=false;
if(n<s1.length()&&n<s2.length())
{
char c=s1.charAt(n);
char d=s2.charAt(s2.length()-n);
String s3=Character.toString(c);
//System.out.println(s3);
String s4=Character.toString(d);
//System.out.println(s4);
if(s3.equalsIgnoreCase(s4))
{
a=true;
}
else
{
a=false;
}
}
return a;
}
}
95. Largest Difference
Write a program to read a integer array, find the largest difference between adjacent
elements and display the index of largest difference.
EXAMPLE:
input1: {2,4,5,1,9,3,8}
output1: 4 (here largest difference 9-1=8 then return index of 9 ie,4)
Include a class UserMainCode with a static method checkDifference which accepts the
integer array. The return type is integer.
Create a Class Main which would be used to accept the integer array and call the static
method present in UserMainCode.
Input and Output Format:
Input consists of an integer n which is the number of elements followed by n integer values.
Output consists of integer.
Refer sample output for formatting specifications.
Sample Input 1:
7
2
4
5
1
9
3
8
Sample Output 1:
4
MAIN CLASS
import java.util.Scanner;
public class Main{
public static void main(String[] args) {
Scanner s=new Scanner(System.in);
int m=s.nextInt();
 int[] n1=new int[m];
 for(int i=0;i<m;i++){
 n1[i]=s.nextInt();
 }
System.out.println(UserMainCode.checkDifference(n1));
s.close();
}
}
USERMAIN CODE
public class UserMainCode {
public static int checkDifference(int[] n1){
int n2,n3=0,n4=0,i;
for(i=0;i<n1.length-1;i++){
n2=Math.abs(n1[i]-n1[i+1]);
if(n2>n3){
n3=n2;
n4=i+1; }}
return n4;
}
}
